Using ocr4gamera with or without hOCR input and output
======================================================

This is a simple collection with scanned images and training data
demonstrating the use of the OCR toolkit of the Gamera framework
for document analysis and recogniton, which are both freely available
from

   http://gamera.sf.net/

The images have been scanned from a historic print of Heinrich Heine's
complete works, which are in the public domain (both the works and
the print). Thsi means that these samples can be freely used, copied
and distributed for any purpose.

Christoph Dalitz and Fabian Schmitt, Septmeber 2014
Contact: <christoph.dalitz@hs-niederrhein.de>


About the sample:
-----------------

The images used in this sample have been split in test and training images.
To limit the size of this example, the training data is not included
with this example package. The training data was used to create the
training database "page_glyphs_uni.xml". Ligatures and glyphs that don't
fit unicode are named in the "names.csv". The test data in the "test" folder
consists of three files per image:

 - *.png  - the original image in greyscale
 - *.txt  - ground truth data in plaintext,
            but with the long 's' replaced with a round 's'.
 - *.html - an hOCR file created by tesseract 
            (with the command "tesseract image output -c hocr")


General use of the ocr4gamera script
------------------------------------

The ocr4gamera script has a considerable number of tuning parameters.
Most are optional, some recommended, and others are only useful under
certain circumstances. The minimum command to start the script is:

	python ocr4gamera.py -d -x page_glyphs_uni.xml test/heine4_1.png

where '-d' (short for '--deskew') is not strictly required, but generally
a good idea. This command will print the recognized text to standard
output; to write it to a file, use the option '-o'. If you want to 
recognize multiple images in one call, you can use the option '-od'
with the path to an output directory instead.

If you use any non-unicode characters or ligatures, or if you
want to replace certain unicode characters with others (e.g. the
long 's' with a round 's'), you have to list them in a '.csv' file.
In this file any class name, that was trained in the '.xml' classifier
and should be replaced by something else, is listed in a single line
with the character(s) it stands for seperated by a comma like:

	latin.small.letter.ck,ck

To activate the replacements from the '.csv' file, use the option '-c'.

By default, the recognition script applies some heuristic rules for
disambiguating some characters which have identical shapes in the
Roman alphabeth, like small 's' and capital 's'. Note that this
disambiguation *does not work in the examples*, because these are
not printed in Roman characters, but in Fraktur letters. To deactivate
the disambiguation use the option "-R none".

For a full list of options, call

    ocr4gamera.py -h


Using hOCR Input:
-----------------

Instead of letting ocr4gamera.py do the segmentation, you can provide
a textline segmentation in the form of an hOCR file. Note that all
information from this file is ignored except for the textline bounding
box information stored in the title of the 'ocr_line' class.

You can use hOCR input with the following command:

	ocr4gamera.py -x page_glyphs_uni.xml -c names.csv -hi test/heine4_1.html test/heine4_1.png

This doesn't work with the option '-od', so make sure you compute onely
one image at a time. On the sample data, some additional options are
recommended. Since there are glyphs in the training data with few samples,
you should change k of the knn-classifyer to one with the option "-k 1".
As a number of glyphs are split, the grouping option "-a" will
also be useful. Furthermore the text is printed in Fraktur and the
'heuristic_rules' option, set set to 'roman' by default, should be
set to none: "-R none".

Note that it is not a good idea to tuse the "-d" (--sekew) option
in combination with hOCR input, because after skew correction the bounding
boxes no longer match.

The command line with all of the mentioned settings reads:

	ocr4gamera.py -x page_glyphs_uni.xml -c names.csv -hi test/heine4_1.html test/heine4_1.png -k 1 -a -R none -o heine4_1_out


Writing hOCR Output:
--------------------

hOCR output stores the bounding box information of the image, textlines
and words together in an html file.

To write hOCR output, use the following command:

	ocr4gamera.py -x page_glyphs_uni.xml -d -c names.csv -ho -o heine4_1_out test/heine4_1.png

For specifying an output file, you have to use '-o' or '-od'. The extension
'.html' will automaticly be added to the name of the output file.
A command line combining hOCR input and output is:

	ocr4gamera.py -x page_glyphs_uni.xml -c names.csv -ho -o heine4_1_out -hi test/heine4_1.html test/heine4_1.png -k 1 -a -R none

